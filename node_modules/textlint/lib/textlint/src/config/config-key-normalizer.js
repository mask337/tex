"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @overview config-key-normalizer provide normalize function for `key`
 * It aim to normalize key and  use it for {rule,filterRule,plugin}'s config.
 *
 * ### Key normalization algorithm
 *
 * - Any package path -> full path
 *
 * **key**: key is normalized string for resolving {rule,filterRule,plugin} option.
 *
 * The key is shorten by design.
 *
 * For example, `@org/textlint-rule-preset-parent`'s `@org/textlint-rule-child` key is `@org/parent/@org/child`.
 *
 * `@org/textlint-rule-preset-parent`'s `@org/textlint-rule-child`:
 * ```json
 * {
 *  "rules": {
 *    "@org/textlint-rule-preset-parent": {
 *       "@org/textlint-rule-child": true
 *    }
 *  }
 *}
 * ```
 *
 * In internal, this config is normalized to following:
 *
 * ```
 * { @org/parent/@org/child: true }
 * ```
 *
 * For more details, see textlint-package-name-util-test.ts
 *
 * **Related:**
 *
 * - <https://github.com/textlint/textlint/issues/583>
 * - <https://github.com/textlint/textlint/pull/586>
 *
 * **Not Related:**
 *
 * Package prefix name is similar with this key algorithm.
 * But, it is not shared this algorithm.
 * It is just prefix(shortcut name).
 *
 * For more details, see package-prefix.ts and textlint-module-resolver.ts
 *
 * @example
 *
 * - textlint-config-<name> -> <name>
 * - textlint-rule-<name> -> <name>
 * - textlint-rule-preset-<name> -> <name>
 * - preset-<name> -> <name>
 *
 *
 */
var package_prefix_1 = require("./package-prefix");
var textlint_package_name_util_1 = require("../engine/textlint-package-name-util");
// @org/preset/@org/rule
var patternOrgXOrg = /^(@.*?\/.*?)\/(@.*?\/.*?)$/;
// @org/preset/rule
var patternOrgXRule = /^(@.*?\/.*?)\/(.*?)$/;
// preset/@org/rule
var patternPresetXOrg = /^(.*?)\/(@.*?)$/;
// preset/rule
var patternPresetXRule = /^([^@].*?)\/(.*?)$/;
/**
 * split "preset/rule" string to {preset, rule}
 */
exports.splitKeyToPresetSubRule = function (name) {
    var patternList = [patternOrgXOrg, patternOrgXRule, patternPresetXOrg, patternPresetXRule];
    for (var i = 0; i < patternList.length; i++) {
        var pattern = patternList[i];
        var result = name.match(pattern);
        if (!result) {
            continue;
        }
        return { preset: result[1], rule: result[2] };
    }
    // Other case is a single rule
    // @org/rule or rule
    return {
        preset: null,
        rule: name
    };
};
/**
 * normalize `keyPath` that is specific path for rule
 * This normalize function handle ambiguity `key`
 * `keyPath` is one of "preset/rule` key, or "rule" key
 * @param keyPath
 */
exports.normalizeKeyPath = function (keyPath) {
    var _a = exports.splitKeyToPresetSubRule(keyPath), preset = _a.preset, rule = _a.rule;
    if (!preset) {
        return exports.normalizeRuleKey(rule);
    }
    return exports.normalizeRulePresetKey(preset) + "/" + exports.normalizeRuleKey(rule);
};
/**
 * Normalize preset-name/rule-name
 */
exports.normalizePresetSubRuleKey = function (names) {
    var preset = names.preset, rule = names.rule;
    return exports.normalizeRulePresetKey(preset) + "/" + exports.normalizeRuleKey(rule);
};
exports.normalizeRuleKey = function (name) {
    return textlint_package_name_util_1.removePrefixFromPackageName([package_prefix_1.PackageNamePrefix.rule], name);
};
exports.normalizeFilterRuleKey = function (name) {
    return textlint_package_name_util_1.removePrefixFromPackageName([package_prefix_1.PackageNamePrefix.filterRule], name);
};
exports.normalizeRulePresetKey = function (name) {
    // "preset-<name>" and "textlint-rule-preset-"
    return textlint_package_name_util_1.removePrefixFromPackageName([package_prefix_1.PackageNamePrefix.rulePreset, "preset-"], name);
};
exports.normalizePluginKey = function (name) {
    return textlint_package_name_util_1.removePrefixFromPackageName([package_prefix_1.PackageNamePrefix.plugin], name);
};
//# sourceMappingURL=config-key-normalizer.js.map